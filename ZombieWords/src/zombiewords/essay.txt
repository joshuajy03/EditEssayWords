And I OOP
Object-Orientation. What is object-orientation? Is it the orientation of objects? Unsurprisingly, yes. However, an object is not what most non-programmers think an object is. An object is a manipulatable storage system of variables. One instance of a basic application of this system of objects is with the x and y coordinates (x, y) in a common mathematical graph. The x and y are separate variables but are combined through object-orientation into a single variable. This can be used and manipulated with as many variables in whatever ways. So what are some actual uses of this often unknown system? Well, some people decided to implement this idea into programming languages such as C and make a whole new type of programming called Object-Oriented Programming (OOP). Object-Oriented Programming allowed for a whole new found ease in coding that has an infinite amount of possible coding applications.
In high school, I have picked up the skill of OOP by participating in the world-renowned programming competition, United States of America Computing Olympiad (USACO), also known as the Cow Olympics. In this competition, high school programmers from all walks of life but all interested in programming come together online to solve problems posted on the competition website. I have used and worked with programming languages for hundreds if not thousands of hours as I strive to improve my knowledge in the art of programming algorithms. But the topic of the best programming language is a highly controversial topic, and I have come to settle the dispute.
Methodology
While I have had many hours of experience programming, the experience of programming is not the only way to be able to measure how good a programming language is. Programming is not just the experience and familiarity of it but the extent to how much you can do with it. It is impossible to learn to use all programming languages as most CS majors are able to if not have to make a new programming language themselves. However, the three most commonly used languages and some of the most widely preferred and used by programmers all over the world are Java, C++, and Python. All three are used as OOP languages in USACO; therefore, I have used all three before. While they all are OOP’s and have similar functions, they are very different in many ways in their productivity and ease of learning, object-orientation, library, and application. Their total score will be a cumulative point total out of 80.
Criteria
Productivity and Ease of Learning (30): For a language to actually be usable by programmers as a viable choice over other languages, it has to be easy to learn and able to be programmed quickly with by people intending to create large projects. My objective is to decide how productive an experienced programmer can be with this language, how fast an experienced programmer can learn to use this language, how well a non-programmer can understand the basics of the language.
Object-Orientation (30): An OOP language needs to be able to have an actual implementation of it. With a bad structure and format, the whole point of it having OOP is negligible. Additionally, the structure must be sophisticated but understandable. I will be deciding how simple the system is and the difficulty of OOP syntax. 
Library (20): A library is an external file or program—think of an extension on a web browser like Grammarly—that is able to be used or run with the program. Actions that are not generally able to be used with just the basic bare-bone language require a library to add to the source. My decisions will determine each language’s library grade based on the number of libraries each program has and the accessibility they have.
C++
Bjarne Strousup, a programmer at AT&T labs, took the legendary language C and implanted on OOP support. This made an OOP platform that people in the software engineering industry were familiar with; however, C++ suffers from a lassitude syntax compared to other OOP languages largely because of the need to support legacy C code and still add enough usability for all the OOP concepts that were latched on. Senior Games Programmer Andrew Norris states that “C++ is unnecessarily complex,” a major downside compared to its other OOP counterparts when it comes to learning and using the language. However, C++ is an excellent language if one’s primary concern is performance and one is willing to accept some complexity to achieve that goal. In the past, C++ had a very limited and restricted library—this is a major downside to this language as it has a narrower view of real-world applications. Ironically, C++ was made for writing system libraries but did not provide much library support itself as it only has a single standard library. 
Productivity and Ease of Learning (30): 20
Object-Orientation (30): 20
Library (20): 10
Total: 50 out of 80
Python
	Python has an excellent systems library as it is well integrated with a core twenty essential libraries. Even though the number of libraries is much more than that of C++ the libraries are very simple to use and can be used very quickly without a lot of studying which contributes to the ease of learning the program. Not only is this true as Python was the first real language I learned in sixth grade and it came really easily with me but Eric Appelt, an avid python programmer, also describes Python as “a big set of reusable and well-maintained libraries that you can just grab off the shelf and save yourself thousands of lines of code reinventing the wheel.” This undeniably depicts python as a language that can be used for almost everything. Python can be used for many more ways compared to its counterparts such as machine learning. In addition, OOP is very easy to use in Python. Python has been an OOP language ever since its creation so it flows fluidly unlike its clunky counterpart C++. Python developers tend to be highly productive in working individually due to these features. Nevertheless, larger-scale python development has issues. Python is strongly typed in a sense, so finding bugs and holes in the code when debugging is quite hard and time-consuming to do.
Productivity and Ease of Learning (30): 20
Object-Orientation (30): 25
Library (20): 20
Total: 65 out of 80
Java
Java has been the language that I have the most experience with. Java is an object-oriented language with a syntax that is similar to C++, but has a better object-oriented framework that is easy to understand and learn. (This comes to show as it is the CollegeBoard’s choice of language to teach high school students OOP in AP Computer Science A.) Additionally, Java has an extensive number of libraries and frameworks numbering in the four to six thousand but it is very like C++ as it has twenty core essential libraries. So the productivity of an experienced Java programmer tends to be high, but the learning curve of Java is closer to C++ than Python. Java is practically the combination of all the best points of C++ and Python. However, Java has a smaller extent of actual real-life applications compared to C++ and Python—most programmers prefer C++ and Python over Java as C++ and Python both outmatch Java when it comes down to independent niches.
Productivity and Ease of Learning (30): 25
Object-Orientation (30): 30
Library (20): 15
Total: 70 out of 80
	To surmise, while Java comes out as the most well-rounded OOP language with a total score of 70, C++ and Python are not to be set aside. C++ and Python both have their own niche markets as well as their own real-world applications that are specific to their languages. That being said, Java does have the best overall score because it does above average in each of the criteria.
